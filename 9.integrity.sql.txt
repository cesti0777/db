--9.integrity.sql
/* 
1. DB자체적인 기능을 사용하겠금 설정
2. 단 제시하는 스펙에 맞게 설정 필수
3. 고려사항
	- 프로젝트
		(client action, 화면 구성, 서버 처리, db...)
	- UI/UX
		(심리학 & 데이터 처리 & 감각 & 편리성 고려 & 창의성...)
	- 사용되는 데이터의 제약조건은
		DB 자체 기능? app~ 소스로 개발? view처리 기술인 js로 할것인지등..
*/
/* 학습내용
*** 하나의 db 시스템에서 모든 제약조건은 관리자들이 쉽게 확인가능하게 설계하는게 좋다
		- 제약조건은 사용자 정의명으로 지정하는게 더 효과적일듯
		
1. table 생성시 제약조건을 설정하는 기법 

2. 제약 조건 종류
	2-1. PK[primary key] 
		- 기본키, 중복불가, null불가, 
		- 데이터들 구분을 위한 핵심 데이터
			: 모든 table에 PK가 절대적인 필수는 아님
		- not null + unique(엣찌있다.. 고유)

	2-2. not null - 반드시 데이터 존재
		      - insert시 데이터 저장 필수
		      - 제약조건명 설정해도 오류 메시지에 안찍힘
		      - 그래서 제약조건명 많이 안씀

	2-3. unique - 중복 불가, null 허용
	
	2-4. check 
		- table 생성시 규정한 범위의 데이터만 저장 가능
		- 유효한 데이터 표현을 할 수 있다는건 장점

	2-5. default 
		- insert시에 특별한 데이터 미저장시에도 자동 저장되는 기본 값
		- 자바 관점에는 멤버 변수 선언 후 객체 생성 직후 멤버 변수 기본값으로 초기화
	
	2-6. FK[foreign key] 
		- 외래키[참조키], 다른 table의 pk를 참조하는 데이터 
		- table간의 주종 관계가 형성
			- pk 보유 table이 부모, 참조하는 table이 자식
		
		- 부모의 미 존재하는 데이터를 자식에서 새로 생성가능? 불가 
			- dept에 미존재하는 deptno는 emp에는 사용 불가
			- 

		- 자식 table들이 존재할 경우 부모 table만 삭제 가능? 불가
			- 해결책 : 관계를 해제도 가능하나 가급적 분석설계시 완벽하리만큼 고민후 설계
	

3. 제약조건명 명시하는 방법
	* 제약조건들은 not null을 제외하곤 db 자체적으로 이름이 있음
	3-1. oracle engine이 기본적으로 설정
		- SYS_Xxxx

	3-2. sql개발자가 직접 설정
		- table명_컬럼명_제약조건명등 기술..단 순서는 임의 변경 가능
		- 약어 사용도 가능[분석, 설계시 용어사전 제시후 작성 권장]
	
4. 제약조건 선언 위치
	4-1. 컬럼 레벨 단위
		- 컬럼선언 라인에 제약조건 설정 

	4-2. 테이블 레벨 단위 
		- 모든 컬럼 선언 직후 별도로 제약조건 설정 



	
5. 오라클 자체 특별한 table
	* 오라클 db 자체의 제약조건 정보 또는 view등의 정보 제공용 table
		- 딕셔너리 table이라고도 함

	5-1. user_constraints
		- 제약조건 정보 보유 table
		- 개발자가 table의 데이터값 직접 수정 불가
		- select constraint_name, constraint_type, table_name 
			from user_constraints;

6. 이미 존재하는 table의 제약조건 수정(추가, 삭제)명령어
	6-1. 제약조건 추가
		alter table 테이블명 add constraint 제약조건명 제약조건(컬럼명);
		alter table dept01 add constraint dept01_deptno_pk primary key(deptno);
		
	6-2. 제약조건 삭제(drop)
		- table삭제 
		alter table 테이블명 cascade constraint;
		
		alter table 테이블명 drop 제약조건명;
		alter table dept01 drop primary key;
		
	6-3. 제약조건 임시 비활성화
		alter table emp01 disable constraint emp01_deptno_fk;

	6-4. 제약조건 활성화
		alter table emp01 enable constraint emp01_deptno_fk;
	
*/
--1. 오라클 db에 설정한 table의 제약조건 정보를 보유하고 있는
-- 오라클 자체 table 검색하기 :  user_constraints
select * from user_constraints;
desc user_constraints;

select  CONSTRAINT_TYPE, table_name 
from user_constraints;

-- emp table의 제약 조건 정보 검색
select constraint_name, constraint_type, table_name 
from user_constraints 
where table_name = 'EMP';

-- table명이 DB 자체 제약 조건 정보 검색??
select constraint_name, constraint_type, table_name 
from user_constraints 
where table_name = 'EMP';


--2. 사용자 정의 제약조건명 명시하기
drop table emp02;

create table emp02(
	empno number(4) constraint emp02_empno_nn not null,
	ename varchar2(10)
);

select constraint_name, constraint_type, table_name
from user_constraints 
where table_name='EMP02';

--정상 저장
insert into emp02 values(1, 'tester');

-- 비정상 : not null에 해당하는 제약조건 위배
	-- ORA-01400: cannot insert NULL into ("SCOTT"."EMP02"."EMPNO")
	-- 제약 조건명 명시해도 에러 메시지에 찍히지 않음
insert into emp02 (ename) values('master');


--3. 사용자 정의 제약조건명 설정 후 위배시 출력되는 메세지에 사용자정의 제약조건명
	-- 확인 가능 
drop table emp02;

create table emp02(
	empno number(4) constraint emp02_empno_u unique,
	ename varchar2(10)
);

insert into emp02 values(1, 'tester');

-- 오류 
	-- ORA-00001: unique constraint (SCOTT.EMP02_EMPNO_U) violated
insert into emp02 values(1, 'master');


--4. 제약조건명을 오라클 엔진이 자동적으로 지정
	-- 에러 발생시 SYS_xxxx로 출력됨 
drop table emp02;
create table emp02(
	empno number(4)  unique,
	ename varchar2(10)
);

select constraint_name, constraint_type, table_name
from user_constraints where table_name='EMP02';

insert into emp02 values(1, 'tester');

-- 오류
	-- ORA-00001: unique constraint (SCOTT.SYS_C007004) violated
	-- 제약 조건 명 불명확
insert into emp02 values(1, 'master');



--5. pk설정
-- 컬럼 레벨단위 
drop table emp02;

create table emp02(
	empno number(4) constraint emp02_empno_pk primary key,
	ename varchar2(10) not null
);

insert into emp02 values(1, 'tester');

-- 오류
	-- ORA-00001: unique constraint (SCOTT.EMP02_EMPNO_PK) violated
insert into emp02 values(1, 'master');


-- table 레벨 단위 : 컬럼들 선언 이후  별도로 적용
drop table emp02;

create table emp02(
	empno number(4),
	ename varchar2(10),
	constraint emp02_empno_pk primary key(empno)
);

insert into emp02 values(1, 'tester');

-- 오류
	-- ORA-00001: unique constraint (SCOTT.EMP02_EMPNO_PK) violated
insert into emp02 values(1, 'master');




--6. 외래키[참조키]
-- 이미 제약조건이 설정된 dept table의 pk컬럼인 deptno값을 기준으로 emp02의
	-- 특정 컬럼이 참조하는 구조 개발
	-- dept에 미 존재하는 데이터 저장시도? 불가
	-- dept의 데이터를 참조하고 있는 상태에서 dept table deptno값 삭제시도? 
	-- 참고 : 졔약조건명 명시 권장(table명, 컬럼명, 제약조건 조합 권장, 
					순서는 정해진 바는 없음)

drop table emp02;

create table emp02(
	empno number(4) primary key,
	ename varchar2(10),
	deptno number(2) constraint emp02_deptno_fk references dept(deptno)
);

insert into emp02 values(1, 'tester', 10);

-- 오류 
	-- ORA-02291: integrity constraint (SCOTT.EMP02_DEPTNO_FK) violated 
							- parent key not found
insert into emp02 values(2, 'master', 50);
select * from emp02;
-- drop table dept;//emp01의 컬럼에서 참조하는 데이터 존재하는한 삭제 불가 


--7. 6번의 내용을 table 레벨 단위로 설정해 보기
drop table emp02;

create table emp02(
	empno number(4) primary key,
	ename varchar2(10),
	deptno number(2),
	constraint emp02_deptno_fk foreign key(deptno) references dept(deptno)
);

insert into emp02 values(1, 'tester', 10);

-- 오류 
	-- ORA-02291: integrity constraint (SCOTT.EMP02_DEPTNO_FK) violated 
							- parent key not found
insert into emp02 values(2, 'master', 60);


--8. sub query를 활용해서 table 생성시에는 제약조건은 절대 반영되지 않음
	-- 해결책 : 이미 존재하는 table의 구조 변경인 alter명령어 제약조건 추가
 
drop table dept01;
drop table emp01;
create table dept01 as select * from dept;
create table emp01 as select * from emp;

-- 실패 : deptno는 pk 중복데이터 불허
	-- ORA-00001: unique constraint (SCOTT.PK_DEPT) violated
insert into dept values(10, '교육부', '시청역');

-- 성공
insert into dept01 values(10, '교육부', '시청역');



--9. 이미 존재하는 table에 제약조건 추가하는 명령어 
/* emp01은 dept01의 pk를 참조하는 종 관계의 table
sql 문장 개발 단계
1단계 - dept01에 pk먼저 적용
2단계 - emp01에서 fk 설정순으로 작업
*/

alter table dept01 add constraint dept01_deptno_pk primary key(deptno);
alter table emp01 
	add constraint emp01_deptno_fk
	foreign key(deptno)
	references dept(deptno);

select table_name, constraint_type, constraint_name
from user_constraints where table_name='EMP01';

--10. 참조 당하는 key의 컬럼이라 하더라도 자식 table에서 미 사용되는 데이터에 한해서는
	-- 삭제 가능  
-- emp01이 이미 참조하는 데이터가 있는 dept01 table 삭제해보기 
	-- 8+9의 sql문장 유지 
-- drop table dept01;  //삭제 불가
-- delete from dept01 where deptno=30; //삭제 불가 
delete from dept01 where deptno=40; --삭제 ok



--11.참조되는 컬럼 데이터라 하더라도 삭제 가능한 명령어
	--11-1-1. 자식 table의 제약조건을 비활성화 : emp01의 제약조건 비활성
	select table_name, constraint_type, constraint_name
	from user_constraints where table_name='EMP01';
	
	-- emp01에서 사용되는 데이터를 보유한 부모 따라서 삭제 불가
	-- 오류 delete from dept01;

	alter table emp01 disable constraint emp01_deptno_fk;
	delete from dept01;	

	-- drop table dept01; 비활성화 되더라도 부모 table삭제 불가 
	select table_name, constraint_type, constraint_name
	from user_constraints where table_name='EMP01';
	
	-- 11-1-2. 비활성화된 자식 table의 제약조건 활성화
	insert into dept01 select * from dept;
	alter table emp01 enable constraint emp01_deptno_fk;
	select * from emp01;
	delete from dept01;
	
	select table_name, constraint_type, constraint_name
	from user_constraints;	
	
	
	--11-2. 자식 존재 유무 완전 무시하고 부모 table삭제 
	drop table dept01 cascade constraint;

	

--12. check : if 조건식과 같이 저장직전의 데이터의 유효 유무 검증하는 제약조건
-- age는 1~100까지의 데이터만 유효
drop table emp01;

create table emp01(
	id varchar2(10) primary key,
	age number(3) constraint emp01_age_ck check(age between 1 and 100)
);

insert into emp01 values('master', 10);
-- 오류 
	-- ORA-02290: check constraint (SCOTT.EMP01_AGE_CK) violated
insert into emp01 values('master', 102);

select * from emp01;
select table_name, constraint_type, constraint_name
	from user_constraints where table_name='EMP01';

-- 13.? gender라는 컬럼에는 데이터가 M 또는 F만 저장되어야 함
drop table emp01;

create table emp01(
	id varchar2(10) primary key,
	age number(3),
	gender varchar2(10) constraint emp01_gender_ck check(gender in('M', 'F'))
);


insert into emp01 values('master', 20, 'F');
-- insert into emp01 values('master', 30, 'T'); //불가 
select * from emp01;

--14. default : insert시에 데이터를 생략해도 자동으로 db에 저장되는 기본값 
drop table emp01;

create table emp01(
	id varchar2(10) primary key,
	gender char(1) default 'F'
);

insert into emp01 (id) values('master');
insert into emp01 values('tester', 'M');
select * from emp01;


	
	
	