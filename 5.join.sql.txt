-- 5.join.sql

/*

* 개발 로직의 데이터 구조에 따라 조인 권장 상황, 조인은 performance가 저하 
된다는 이유로 가급적 조인작업 없이 진행하자라는 의도로 table 설계를 하기도 함.

1. 조인이란?
	다수의 table간에  공통된 데이터를 기준으로 검색하는 명령어


2. 사용 table 
	1. emp & dept 
	  : deptno 컬럼을 기준으로 연관되어 있음

	 2. emp & salgrade
	  : sal 컬럼을 기준으로 연관되어 있음


3. table에 별칭 사용 
	검색시 다중 table의 컬럼명이 다를 경우 table별칭 사용 불필요, 
	서로 다른 table간의 컬럼명이 중복된 경우,
	컬럼 구분을 위해 오라클 엔진에게 정확한 table 소속명을 알려줘야 함
	- table명 또는 table별칭
	- 주의사항 : 컬럼별칭 as[옵션], table별칭 as 사용 불가


4. 조인 종류 
	1. 동등 조인
		 = 동등비교 연산자 사용
		 : 사용 빈도 가장 높음
		 : 테이블에서 같은 조건이 존재할 경우의 값 검색 

	2. not-equi 조인
		: 100% 일치하지 않고 특정 범위내의 데이터 조인시에 사용
		: between ~ and(비교 연산자)

	3. self 조인 
		: 동일 테이블 내에서 진행되는 조인
		: 동일 테이블 내에서 상이한 칼럼 참조
			emp의 empno[사번]과 mgr[사번] 관계

	4. outer 조인 
		: 두개 이상의 테이블이 조인될때 특정 데이터가 모든 테이블에 존재하지 않고 컬럼은 존재하나 null값을 보유한 경우
		  검색되지 않는 문제를 해결하기 위해 사용되는 조인
		  null 값이기 때문에 배제된 행을 결과에 포함 할 수 있드며 (+) 기호를 조인 조건에서 정보가 부족한 컬럼쪽에 적용
		
		: oracle DB의 sql인 경우 데이터가 null 쪽 table 에 + 기호 표기 */

-- 1. dept table의 구조 검색
desc dept;
-- dept table의 모든 데이터 검색
select * from dept;



--*** 1. 동등 조인 ***

-- 2. SMITH 의 이름, 사번, 근무지역(부서위치) 정보를 검색

-- 문법은 정상, 단 논리적으로 결과값 문제 발생
select ename, empno, loc from emp, dept where ename = 'SMITH';

-- 선호하는 문장 (SMITH를 먼저 거르는 것이 performance적으로 우수)
select ename, empno, loc from emp, dept 
where ename = 'SMITH' and emp.deptno = dept.deptno;

-- table 명이 복잡할 경우 간단한 별칭 적용해서 검색
select ename, empno, loc from emp e, dept d 
where e.deptno = d.deptno and ename = 'SMITH';


-- 3. deptno가 동일한 모든 데이터 검색
	-- emp, dept table에 존재
	-- deptno가 두번 검색(의미 없음)
select * from emp e, dept d where e.deptno = d.deptno;

-- 해결책
select ename, empno, e.deptno, dname 
from emp e, dept d 
where e.deptno = d.deptno;

-- 4. 2+3 번 항목 결합해서 SMITH에 대한 모든 정보 검색하기
select ename, empno, loc, e.deptno, dname 
from emp e, dept d
where ename = 'SMITH' and e.deptno = d.deptno;

-- 5.  SMITH에 대한 이름(ename)과 부서번호(deptno), 부서명(dept의 dname) 검색하기
select ename, deptno, d.dname 
from emp e, dept d 
where ename = 'SMITH' and e.deptno = d.deptno;


-- 6. 조인을 사용해서 뉴욕에 근무하는 사원의 이름과 급여를 검색 
-- loc='NEW YORK', ename, sal
select ename, sal, loc 
from emp e, dept d 
where loc = 'NEW YORK' and e.deptno = d.deptno;
-- NEW YORK의 deptno 가 검색의 기준 데이터

-- dept의 제약조건이 생략이 되어 있기 때문에 논리적인 오류 발생
	-- emp의 deptno가 10인 3개의 데이터가 dept table의 row 수만큼 검색
select ename, sal, loc 
from emp e, dept d 
where e.deptno = (select deptno 
		  from dept 
		  where loc = 'NEW YORK');
select ename, sal, loc 
from emp e, dept d 
where e.deptno = 10;

-- dept table에도 10데이터에 한해서만 제약
select ename, sal, loc 
from emp e, dept d 
where e.deptno = 10 and d.deptno = 10;


-- 7. 조인 사용해서 ACCOUNTING 부서(dname)에 소속된 사원의 이름과 입사일 검색
select ename, hiredate, dname 
from emp e, dept d 
where dname = 'ACCOUNTING' and e.deptno = d.deptno;


-- 8. 직급이 MANAGER인 사원의 이름, 부서명 검색
select ename, dname, job 
from emp e, dept d 
where job = 'MANAGER' and d.deptno = e.deptno;


-- *** 2. not-equi 조인 ***

-- salgrade table(급여 등급 관련 table)
-- 9. 사원의 급여가 몇 등급인지 검색
-- between ~ and 
select ename, sal, losal, hisal, grade 
from emp e, salgrade s 
where sal between losal and hisal;



--? 등급이 3등급인 사원들의 이름과 급여 검색
select ename, sal, losal, hisal, grade 
from emp e, salgrade s 
where sal between losal and hisal and grade = 3;


-- 동등조인 연습문제
-- 10. 사원(emp) 테이블의 부서 번호(deptno)로 부서 테이블을 참조하여 사원명, 부서번호, 부서의 이름(dname) 검색
select ename, e.deptno, dname 
from emp e, dept d 
where e.deptno = d.deptno;



-- *** 3. self 조인 ***

-- 11. SMITH 직원의 메니저 이름 검색
-- 직원 table : emp e[ename, empno, mgr]
-- 메니저 table : emp m[empno, ename]
select m.ename 
from emp e, emp m 
where a.ename = 'SMITH' and a.mgr = b.empno;


--12. 메니저가 KING인 사원들의 이름과 직급 검색
-- m : ename = 'KING'
-- e : ename, job
select e.ename, e.job 
from emp e, emp m 
where m.ename = 'KING' and e.mgr = m.empno;


--13. SMITH와 동일한 근무지에서 근무하는 사원의 이름 검색
--SMITH 데이터 절대 검색 불가
-- SMITH동일 근무지 - deptno로 검색
-- deptno가 일치되는 사원의 이름 -  ename
	/* 내 table : e
	*/ 동료 table : e2
	-- SMITH 까지도 검색됨
	select e2.ename  
	from emp e, emp e2
	where e.ename = 'SMITH' 
	      and e.deptno = e2.deptno;

	-- SMITH 제거
	select e2.ename  
	from emp e, emp e2
	where e.ename = 'SMITH' 
	      and e2.ename != 'SMITH' 
	      and e.deptno = e2.deptno;
 

--*** 4. outer join ***
-- 14. 모든 사원명, 메니저 명 검색, 단 메니저가 없는 사원도 검색되어야 함
-- null값을 포함한 검색도 반드시 필수
-- KING인 경우 mgr 데이터는 null
-- null이라는 값의 메니저 table의 사번은 존재하지 않음
-- 오라클 DB인 경우 데이터 자체가 존재하지 않는 쪽에 (+) 기호 반영
select e.ename, m.ename 
from emp e, emp m 
where e.mgr = m.empno(+);


-- 15. 모든 직원명, 부서번호, 부서명 검색
-- 부서 테이블의 40번 부서와 조인할 사원 테이블의 분서 번호가 없지만,
-- outer join이용해서 40번 부서의 부서 이름도 검색하기
select e.ename, e.deptno, d.dname 
from emp e, dept d
where e.deptno(+) = d.deptno;

-- e.deptno 컬럼 검색시 40번 부서 번호 검색 불가
select e.ename, d.deptno, d.dname 
from emp e, dept d
where e.deptno(+) = d.deptno;



